@page "/send_image"
@using System.Diagnostics
@rendermode RenderMode.InteractiveServer
@inject IWebHostEnvironment Environment
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<h3>SendImage</h3>

<form>
    <div class="form-group">
        <label for="formGroupExampleInput">Номер задания</label>
        <input type="text" class="form-control" bind-value="@idTask"
               id="formGroupExampleInput" placeholder="Номер задания">
    </div>
</form>

<div class="form-check">
    <input class="form-check-input" type="radio" id="PictureButton"
    checked="@(IsPicture == true)" @onchange="@(() => ChangeValueRadioButton("Картинка"))" />
    <label class="form-check-label" for="PictureButton">Картинка</label>
</div>
<div class="form-check">
    <input class="form-check-input" id="TextButton"
    type="radio" checked="@(IsPicture == false)" @onchange="@(() => ChangeValueRadioButton("Текст"))" />
    <label class="form-check-label" for="TextButton">Текст</label>
</div>
<p>
    <div hidden="@(!IsPicture)">
        <div @ref="dropZoneElement" class="drop-zone">
            <p>Drop a file or paste an image from the clipboard or select a file using the input</p>
            <InputFile OnChange="@OnChange" @ref="inputFile" />
        </div>
        <img src="@src" class="rounded mx-auto d-block"/>
    </div>
    <label hidden="@(IsPicture)">
        <div class="form-group">
            <label for="formGroupExampleInput">Ввод ответа на задание:</label>
            <input type="text" class="form-control" bind-value="@idTask"
                   id="formGroupExampleInput" placeholder="Ввод ответа" multiple>
        </div>
    </label>
</p>


@code {
    bool IsPicture = true;
    string idTask;
    string UnsafaFileName;

    ElementReference dropZoneElement;
    InputFile inputFile;

    IJSObjectReference _module;
    IJSObjectReference _dropZoneInstance;

    string src;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./dropZone.js");

            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFile.Element);
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        using var stream = e.File.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        src = "data:" + e.File.ContentType + ";base64," + Convert.ToBase64String(ms.ToArray());
    }

    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }


    void ChangeValueRadioButton(string TypeButton)
    {
        switch (TypeButton)
        {
            case "Картинка":
                IsPicture = true;
                break;

            case "Текст":
                IsPicture = false;
                break;

            default:
                break;
        }
        InvokeAsync(StateHasChanged);
    }
}
