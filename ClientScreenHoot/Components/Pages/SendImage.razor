@page "/send_image"
@using System.Diagnostics
@rendermode RenderMode.InteractiveServer
@inject IWebHostEnvironment Environment
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<h3>SendImage</h3>

<form>
    <div class="form-group">
        <label for="formGroupExampleInput">Номер задания</label>
        <input type="text" class="form-control" bind="@idTask" @onchange="@((ChangeEventArgs e) => idTask = e.Value.ToString())"
               id="formGroupExampleInput" placeholder="Номер задания">
    </div>
</form>

<div class="form-check">
    <input class="form-check-input" type="radio" id="PictureButton"
    checked="@(IsPicture == true)" @onchange="@(() => ChangeValueRadioButton("Картинка"))" />
    <label class="form-check-label" for="PictureButton">Картинка</label>
</div>
<div class="form-check">
    <input class="form-check-input" id="TextButton"
    type="radio" checked="@(IsPicture == false)" @onchange="@(() => ChangeValueRadioButton("Текст"))" />
    <label class="form-check-label" for="TextButton">Текст</label>
</div>
<p>
    <div hidden="@(!IsPicture)">
        <div @ref="dropZoneElement" class="drop-zone">
            <p>Drop a file or paste an image from the clipboard or select a file using the input</p>
            <InputFile OnChange="@OnChange" @ref="inputFile" />
        </div>
    </div>
    <div class="form-group" hidden="@(IsPicture)">
        <label for="formGroupExampleInput">Ввод ответа на задание:</label>
        <textarea type="text" class="form-control" bind="@TextAnswer" @onchange="@((ChangeEventArgs e) => TextAnswer = e.Value.ToString())"
                id="formGroupExampleInput" placeholder="Ввод ответа"/>
    </div>
</p>
<div>
    <button class="btn btn-outline-dark" type="button" onclick="@(() => AddToListItem())">Добавить в список</button>
</div>

<div class="container-fluid">
    <div class="row flex-row flex-nowrap">
        @foreach (var answer in ListAnswer)
        {
            <div class="card-answer" @onclick="@(() => ChooseCard(answer))">
                <div>
                    <label class="form-label">Номер карточки: @answer.Number.ToString()</label>
                </div>
                @if(answer.Image != null)
                {
                    <div>
                        <img class="img-thumbnail" height="400" width="200" src="data:image;base64,@Convert.ToBase64String(answer.Image)" />
                    </div>   
                }
                <div>
                    <label class="text-answer">@answer.TextAnswer</label>
                </div>
            </div>
        }
    </div>
</div>

<label class="form-label">@TextInfo</label>

@code {
    bool IsPicture = true;
    string idTask { get; set; }
    string TextAnswer { get; set; }
    string TextInfo { get; set; }

    List<Answer> ListAnswer = new List<Answer>(); 

    ElementReference dropZoneElement;
    InputFile inputFile;

    IJSObjectReference _module;
    IJSObjectReference _dropZoneInstance;

    string src;
    MemoryStream ImageStream;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./dropZone.js");

            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFile.Element);
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        using var stream = e.File.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        src = "data:" + e.File.ContentType + ";base64," + Convert.ToBase64String(ms.ToArray());
        ImageStream = ms;
    }

    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }

    private void AddToListItem()
    {
        int number;
        if (int.TryParse(idTask, out number) == false)
        {
            return;
        }

        if(ListAnswer.FirstOrDefault(la => la.Number == number) != null)
        {
            TextInfo = "Карточка с таким id уже есть!";
            return;
        }

        Answer answ = new Answer();

        if(IsPicture == true && ImageStream != null)
        {
            answ.Image = ImageStream.ToArray();
            answ.Number = number;
        }
        else
        {
            answ.TextAnswer = TextAnswer;
            answ.Number = number;
        }

        ListAnswer.Add(answ);
    }

    private void ChangeValueRadioButton(string TypeButton)
    {
        switch (TypeButton)
        {
            case "Картинка":
                IsPicture = true;
                break;

            case "Текст":
                IsPicture = false;
                break;

            default:
                break;
        }
        InvokeAsync(StateHasChanged);
    }

    private void ChooseCard(Answer answer)
    {
        TextInfo = "Выбрана карточка с ID: " + answer.Number;
        Answer.CurrentAnswer = answer;
    }
}
